import React, { useState, useEffect } from 'react'

import gql from 'graphql-tag'
import type {
  CreateGroceryListItemMutation,
  CreateGroceryListItemMutationVariables,
  DeleteGroceryListItemMutation,
  DeleteGroceryListItemMutationVariables,
  GroceryListItem as GraphQLGroceryListItem,
  GroceryListItemsQuery,
  GroceryListItemsQueryVariables,
  UpdateGroceryListItemMutation,
  UpdateGroceryListItemMutationVariables,
  // Placeholder for the new mutation types - will be generated by Redwood
  UpsertPantryItemFromGroceryItemMutation,
  UpsertPantryItemFromGroceryItemMutationVariables,
} from 'types/graphql'

import { MetaTags, useQuery, useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'

import { QUERY as PANTRY_ITEMS_QUERY } from 'src/components/PantryItemsCell/PantryItemsCell' // For refetching pantry

// Define CATEGORIES and Category locally as a workaround
const CATEGORIES = [
  'Produce',
  'Dairy',
  'Meat & Seafood',
  'Pantry',
  'Frozen',
  'Beverages',
  'Condiments/Spices',
  'Other',
] as const

export type Category = (typeof CATEGORIES)[number]

type GroceryItem = GraphQLGroceryListItem

export const GET_GROCERY_LIST_ITEMS_QUERY = gql`
  query GroceryListItemsQuery {
    groceryListItems {
      id
      name
      category
      purchased
      createdAt
      updatedAt
    }
  }
`

const CREATE_GROCERY_LIST_ITEM_MUTATION = gql`
  mutation CreateGroceryListItemMutation($input: CreateGroceryListItemInput!) {
    createGroceryListItem(input: $input) {
      id
      name
      category
      purchased
    }
  }
`

const UPDATE_GROCERY_LIST_ITEM_MUTATION = gql`
  mutation UpdateGroceryListItemMutation(
    $id: Int!
    $input: UpdateGroceryListItemInput!
  ) {
    updateGroceryListItem(id: $id, input: $input) {
      id
      name
      category
      purchased
    }
  }
`

const DELETE_GROCERY_LIST_ITEM_MUTATION = gql`
  mutation DeleteGroceryListItemMutation($id: Int!) {
    deleteGroceryListItem(id: $id) {
      id
    }
  }
`

// Define the new mutation for upserting pantry items from grocery items
const UPSERT_PANTRY_ITEM_FROM_GROCERY_ITEM_MUTATION = gql`
  mutation UpsertPantryItemFromGroceryItemMutation(
    $input: UpsertPantryItemFromGroceryInput!
  ) {
    upsertPantryItemFromGroceryItem(input: $input) {
      id # Or whatever fields you want to return
      name
      category
      quantity
      notes
    }
  }
`

const GroceryListPage: React.FC = () => {
  const [newItemName, setNewItemName] = useState('')
  const [newItemCategory, setNewItemCategory] = useState<Category>(
    CATEGORIES[0]
  )

  const {
    data,
    loading: queryLoading,
    error: queryError,
    refetch,
  } = useQuery<GroceryListItemsQuery, GroceryListItemsQueryVariables>(
    GET_GROCERY_LIST_ITEMS_QUERY
  )


  // Hook for the new upsert pantry item mutation
  const [
    upsertPantryItemFromGroceryItem,
    { loading: upsertPantryLoading, error: upsertPantryError },
  ] = useMutation<
    UpsertPantryItemFromGroceryItemMutation,
    UpsertPantryItemFromGroceryItemMutationVariables
  >(UPSERT_PANTRY_ITEM_FROM_GROCERY_ITEM_MUTATION, {
    onCompleted: () => {
      // Toast for this specific action can be added if needed, or rely on the primary toast
      // toast.success('Pantry updated from grocery list!')
    },
    onError: (error) => {
      toast.error(`Failed to update pantry: ${error.message}`)
    },
    refetchQueries: [{ query: PANTRY_ITEMS_QUERY }], // Refetch pantry items after this operation
    awaitRefetchQueries: true,
  })

  const [
    createGroceryListItem,
    { loading: createLoading, error: createError },
  ] = useMutation<
    CreateGroceryListItemMutation,
    CreateGroceryListItemMutationVariables
  >(CREATE_GROCERY_LIST_ITEM_MUTATION, {
    onCompleted: () => {
      toast.success('Item added!')
      setNewItemName('') // Clear input field
      refetch() // Refetch the list to include the new item
    },
    onError: (error) => {
      toast.error(`Failed to add item: ${error.message}`)
    },
  })

  const [
    updateGroceryListItem,
    { loading: updateLoading, error: updateError },
  ] = useMutation<
    UpdateGroceryListItemMutation,
    UpdateGroceryListItemMutationVariables
  >(UPDATE_GROCERY_LIST_ITEM_MUTATION, {
    onCompleted: (updatedGroceryItemData) => {
      toast.success('Item updated in Pantry')
      const updatedItem = updatedGroceryItemData.updateGroceryListItem
      if (updatedItem && updatedItem.purchased) {
        // If item is marked as purchased, upsert it into the pantry
        upsertPantryItemFromGroceryItem({
          variables: {
            input: {
              name: updatedItem.name,
              category: updatedItem.category as string, // Assuming category is compatible
              // Add other relevant fields for pantry item, e.g., default quantity
              quantity: '1',
              notes: 'Added from grocery list',
            },
          },
        })
      } else if (updatedItem && !updatedItem.purchased) {
        // Optional: Handle logic if item is marked as un-purchased
        // e.g., remove from pantry or decrease quantity if it was added this way
        // For now, we primarily focus on the 'purchased' => 'In Stock' flow
      }
      // refetch() // Handled by refetchQueries for GET_GROCERY_LIST_ITEMS_QUERY
    },
    onError: (error) => {
      toast.error(error.message)
    },
    refetchQueries: [{ query: GET_GROCERY_LIST_ITEMS_QUERY }],
  })

  const [
    deleteGroceryListItem,
    { loading: deleteLoading, error: deleteError },
  ] = useMutation<
    DeleteGroceryListItemMutation,
    DeleteGroceryListItemMutationVariables
  >(DELETE_GROCERY_LIST_ITEM_MUTATION, {
    onCompleted: () => {
      toast.success('Item deleted')
      // refetch() // Handled by refetchQueries
    },
    onError: (error) => {
      toast.error(error.message)
    },
    refetchQueries: [{ query: GET_GROCERY_LIST_ITEMS_QUERY }],
  })

  const handleAddItem = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (newItemName.trim() === '') {
      toast.error('Item name cannot be empty.')
      return
    }
    // No try-catch needed here as useMutation's onError handles it
    await createGroceryListItem({
      variables: {
        input: {
          name: newItemName.trim(),
          category: newItemCategory,
          purchased: false,
        },
      },
    })
  }

  const handleDeleteItem = (itemId: number) => {
    deleteGroceryListItem({ variables: { id: itemId } })
  }

  const handleDeleteCategoryItems = (categoryToDelete: Category) => {
    const itemsInCurrentCategory = (data?.groceryListItems || []).filter(
      (item) => item.category === categoryToDelete
    )
    if (itemsInCurrentCategory.length === 0) {
      toast(`No items to delete in ${categoryToDelete}.`) // Ensure toast.info is not used
      return
    }
    if (
      !confirm(
        `Are you sure you want to delete all items in ${categoryToDelete}?`
      )
    ) {
      return
    }
    itemsInCurrentCategory.forEach((item) => {
      deleteGroceryListItem({ variables: { id: item.id } })
    })
  }

  const handleTogglePurchased = (itemId: number) => {
    const item = (data?.groceryListItems || []).find((i) => i.id === itemId)
    if (item) {
      updateGroceryListItem({
        variables: {
          id: itemId,
          input: { purchased: !item.purchased },
        },
      })
    }
  }

  const groupedItems = CATEGORIES.reduce(
    (acc, category) => {
      const itemsInCategory = (data?.groceryListItems || [])
        .filter((item) => item.category === category)
        .sort((a, b) => a.name.localeCompare(b.name))
      if (itemsInCategory.length > 0) {
        acc[category] = itemsInCategory
      }
      return acc
    },
    {} as Record<Category, GroceryItem[]>
  )

  return (
    <>
      <MetaTags title="Grocery List" description="Manage your grocery list" />

      <div className="space-y-8">
        <h1 className="text-3xl font-bold text-gray-800">Grocery List</h1>

        {/* Add Item Form */}
        <form
          onSubmit={handleAddItem}
          className="space-y-3 rounded-lg bg-white p-4 shadow md:flex md:items-end md:space-x-3 md:space-y-0"
        >
          <div>
            <label
              htmlFor="itemName"
              className="block text-sm font-medium text-gray-700"
            >
              Item Name
            </label>
            <input
              type="text"
              id="itemName"
              value={newItemName}
              onChange={(e) => setNewItemName(e.target.value)}
              placeholder="E.g., Apples"
              className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-teal-500 focus:outline-none focus:ring-teal-500 sm:text-sm"
              required
            />
          </div>
          <div>
            <label
              htmlFor="itemCategory"
              className="block text-sm font-medium text-gray-700"
            >
              Category
            </label>
            <select
              id="itemCategory"
              value={newItemCategory}
              onChange={(e) => setNewItemCategory(e.target.value as Category)}
              className="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-teal-500 focus:outline-none focus:ring-teal-500 sm:text-sm"
            >
              {CATEGORIES.map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>
          </div>
          <button
            type="submit"
            className="w-full rounded-md bg-teal-600 px-4 py-2 text-white transition-colors hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 md:w-auto"
          >
            Add Item
          </button>
        </form>

        {/* Display Items */}
        <div className="space-y-6">
          {(data?.groceryListItems || []).length === 0 ? (
            <p className="py-4 text-center italic text-gray-500">
              Your grocery list is empty. Add some items above!
            </p>
          ) : (
            CATEGORIES.map((category) => {
              const itemsInCategory = groupedItems[category]
              if (!itemsInCategory || itemsInCategory.length === 0) {
                return null // Don't render category if no items
              }
              return (
                <div key={category} className="rounded-lg bg-white p-4 shadow">
                  <div className="mb-3 flex items-center justify-between border-b pb-2">
                    <h2 className="text-xl font-semibold text-gray-700">
                      {category}
                    </h2>
                    <button
                      onClick={() => handleDeleteCategoryItems(category)}
                      className="rounded bg-red-500 px-2 py-1 text-xs text-white transition-colors hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1"
                      aria-label={`Delete all items in ${category}`}
                    >
                      Delete All
                    </button>
                  </div>
                  <ul className="space-y-2">
                    {itemsInCategory.map((item) => (
                      <li
                        key={item.id}
                        className="flex items-center justify-between rounded p-2 hover:bg-gray-50"
                      >
                        <div className="flex items-center">
                          <button
                            onClick={() => handleTogglePurchased(item.id)}
                            className="mr-2"
                          >
                            {item.purchased ? '☑️' : '🔲'}
                          </button>
                          <span
                            className={`${
                              item.purchased ? 'text-gray-500 line-through' : ''
                            }`}
                          >
                            {item.name}
                          </span>
                        </div>
                        <button
                          onClick={() => handleDeleteItem(item.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          🗑️
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              )
            })
          )}
        </div>
      </div>
    </>
  )
}

export default GroceryListPage
